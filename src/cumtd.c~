#include <pebble.h>

#define NUM_MENU_SECTIONS 1
#define NUM_FIRST_MENU_ITEMS 5

static Window *window;
static TextLayer *text_layer;

static SimpleMenuLayer *simple_menu_layer;
static SimpleMenuSection menu_sections[NUM_MENU_SECTIONS];
static SimpleMenuItem first_menu_items[NUM_FIRST_MENU_ITEMS];
//static GBitmap *menu_icon_image;
enum {
  stop1,
  stop2,
  stop3,
  stop4,
  stop5
};

static void menu_select_callback(int index, void *ctx) {
  first_menu_items[index].subtitle = "You've hit select here!";
  layer_mark_dirty(simple_menu_layer_get_layer(simple_menu_layer));
}

static void select_click_handler(ClickRecognizerRef recognizer, void *context) {
  text_layer_set_text(text_layer, "Select");
}

static void up_click_handler(ClickRecognizerRef recognizer, void *context) {
  text_layer_set_text(text_layer, "Up");
}

static void down_click_handler(ClickRecognizerRef recognizer, void *context) {
  text_layer_set_text(text_layer, "Down");
}

static void click_config_provider(void *context) {
  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);
  window_single_click_subscribe(BUTTON_ID_UP, up_click_handler);
  window_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);
}

static void draw_menu(char *stop1, char *stop2, char *stop3, char *stop4, char *stop5) {
  int num_a_items = 0;
  first_menu_items[num_a_items++] = (SimpleMenuItem){
    .title = stop1,
    .subtitle = "Here's a subtitle",
    .callback = menu_select_callback,
  };
  first_menu_items[num_a_items++] = (SimpleMenuItem){
    .title = stop2,
    .subtitle = "Here's a subtitle",
    .callback = menu_select_callback,
  };
  first_menu_items[num_a_items++] = (SimpleMenuItem){
    .title = stop3,
    .subtitle = "Here's a subtitle",
    .callback = menu_select_callback,
  };
  first_menu_items[num_a_items++] = (SimpleMenuItem){
    .title = stop4,
    .subtitle = "Here's a subtitle",
    .callback = menu_select_callback,
  };
  first_menu_items[num_a_items++] = (SimpleMenuItem){
    .title = stop5,
    .subtitle = "Here's a subtitle",
    .callback = menu_select_callback,
  };
  menu_sections[0] = (SimpleMenuSection) {
    .title = "First Section Menu",
    .num_items = NUM_FIRST_MENU_ITEMS,
    .items = first_menu_items,
  };

  Layer *window_layer = window_get_root_layer(window);
  GRect bounds = layer_get_bounds(window_layer);
  simple_menu_layer = simple_menu_layer_create(bounds, window, menu_sections, NUM_MENU_SECTIONS, NULL);
  layer_add_child(window_layer, simple_menu_layer_get_layer(simple_menu_layer));
}

static void window_load(Window *window) {
  //Layer *window_layer = window_get_root_layer(window);
  //GRect bounds = layer_get_bounds(window_layer);

  //text_layer = text_layer_create((GRect) { .origin = { 0, 72 }, .size = { bounds.size.w, 20 } });
  //text_layer_set_text(text_layer, "Press a button");
  //text_layer_set_text_alignment(text_layer, GTextAlignmentCenter);
  //layer_add_child(window_layer, text_layer_get_layer(text_layer));
}

static void window_unload(Window *window) {
  simple_menu_layer_destroy(simple_menu_layer);
  text_layer_destroy(text_layer);
}

static void deinit(void) {
  window_destroy(window);
}

void out_sent_handler(DictionaryIterator *sent, void *context) {
  // outgoing message was delivered
  APP_LOG(APP_LOG_LEVEL_DEBUG, "Outgoing Message Delivered");
}


void out_failed_handler(DictionaryIterator *failed, AppMessageResult reason, void *context) {
  // outgoing message failed
  APP_LOG(APP_LOG_LEVEL_DEBUG, "Outgoing Message Failed");
}

void debug(char *text) {
  APP_LOG(APP_LOG_LEVEL_DEBUG, text);
}

void in_received_handler(DictionaryIterator *received, void *context) {
  // incoming message received

  // Check for fields you expect to receive
  Tuple *stop1_tuple = dict_find(received, stop1);
  Tuple *stop2_tuple = dict_find(received, stop2);
  Tuple *stop3_tuple = dict_find(received, stop3);
  Tuple *stop4_tuple = dict_find(received, stop4);
  Tuple *stop5_tuple = dict_find(received, stop5);
  if(stop1_tuple == NULL) {
    debug("NO STOP1");
  }
  else {
    debug("HAVE STOP1");
  }
  debug(stop1_tuple->value->cstring);
  debug(stop2_tuple->value->cstring);
  debug(stop3_tuple->value->cstring);
  debug(stop4_tuple->value->cstring);
  debug(stop5_tuple->value->cstring);

  draw_menu(stop1_tuple->value->cstring,
            stop2_tuple->value->cstring,
            stop3_tuple->value->cstring,
            stop4_tuple->value->cstring,
            stop5_tuple->value->cstring
  );
  // Act on the found fields received
/*
  if (text_tuple) {
    char* name = text_tuple->value->cstring;
    APP_LOG(APP_LOG_LEVEL_DEBUG, "Text: %s", name);
    //text_layer_set_text(text_layer, name);
    first_menu_items[0].title = name;
    layer_mark_dirty(simple_menu_layer_get_layer(simple_menu_layer));

    DictionaryIterator *iter;
    app_message_outbox_begin(&iter);
    Tuplet value = TupletCString(firstKey, name);
    dict_write_tuplet(iter, &value);
    app_message_outbox_send();
  }
*/
}


void in_dropped_handler(AppMessageResult reason, void *context) {
  // incoming message dropped
}

static void init(void) {
  app_message_register_inbox_received(in_received_handler);
  app_message_register_inbox_dropped(in_dropped_handler);
  app_message_register_outbox_sent(out_sent_handler);
  app_message_register_outbox_failed(out_failed_handler);

  const uint32_t inbound_size = 64;
  const uint32_t outbound_size = 64;
  app_message_open(inbound_size, outbound_size);

  window = window_create();
  window_set_click_config_provider(window, click_config_provider);
  window_set_window_handlers(window, (WindowHandlers) {
    .load = window_load,
    .unload = window_unload,
  });
  const bool animated = true;
  window_stack_push(window, animated);
}

int main(void) {
  init();

  APP_LOG(APP_LOG_LEVEL_DEBUG, "Done initializing, pushed window: %p", window);

  app_event_loop();
  deinit();
}
